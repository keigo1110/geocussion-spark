name: Geocussion-SP CI/CD Pipeline

on:
  push:
    branches: [ main, develop, ref/* ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # 毎日午前2時（UTC）に実行
    - cron: '0 2 * * *'

env:
  PYTHON_VERSION: '3.9'
  PYTHONPATH: ${{ github.workspace }}/pyorbbecsdk/install/lib/

jobs:
  # ===================================================================
  # ユニットテスト（高速・優先）
  # ===================================================================
  unit-tests:
    name: "Unit Tests (Python ${{ matrix.python-version }})"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11']
      fail-fast: false
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache Dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/pip
          venv
        key: ${{ runner.os }}-python-${{ matrix.python-version }}-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-python-${{ matrix.python-version }}-
          
    - name: Install System Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libasound2-dev portaudio19-dev \
          libportaudio2 libportaudiocpp0 \
          libopencv-dev python3-opencv \
          libegl1-mesa-dev
          
    - name: Install Python Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run Unit Tests
      run: |
        ./run_tests.sh unit --ci --parallel
        
    - name: Upload Coverage Reports
      uses: codecov/codecov-action@v3
      if: matrix.python-version == '3.9'
      with:
        file: ./coverage.xml
        flags: unittests
        name: unit-tests-coverage
        
    - name: Upload Test Results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: unit-test-results-${{ matrix.python-version }}
        path: |
          pytest-results.xml
          htmlcov/
          logs/

  # ===================================================================
  # 統合テスト
  # ===================================================================
  integration-tests:
    name: "Integration Tests"
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libasound2-dev portaudio19-dev libopencv-dev
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run Integration Tests
      run: |
        ./run_tests.sh integration --ci
        
    - name: Upload Integration Test Results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: integration-test-results
        path: |
          pytest-results.xml
          htmlcov/

  # ===================================================================
  # パフォーマンステスト
  # ===================================================================
  performance-tests:
    name: "Performance Tests"
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libasound2-dev portaudio19-dev libopencv-dev
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run Performance Tests
      run: |
        ./run_tests.sh performance --ci --benchmark
        
    - name: Upload Performance Results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: performance-test-results
        path: |
          pytest-results.xml
          .benchmarks/

  # ===================================================================
  # 型チェック（MyPy）
  # ===================================================================
  type-checking:
    name: "Type Checking (MyPy)"
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install mypy types-PyYAML types-setuptools
        pip install -r requirements.txt
        
    - name: Run MyPy Type Checking
      run: |
        mypy src/ --config-file mypy.ini --junit-xml mypy-results.xml
        
    - name: Upload Type Check Results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: type-check-results
        path: mypy-results.xml

  # ===================================================================
  # E2Eテスト（条件付き）
  # ===================================================================
  e2e-tests:
    name: "E2E Tests (Conditional)"
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    if: github.event_name == 'push' && (contains(github.ref, 'main') || contains(github.ref, 'ref/'))
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libasound2-dev portaudio19-dev libopencv-dev
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run E2E Tests
      run: |
        ./run_tests.sh e2e --ci
        
    - name: Upload E2E Test Results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: e2e-test-results
        path: |
          pytest-results.xml
          logs/

  # ===================================================================
  # 品質ゲート集約
  # ===================================================================
  quality-gate:
    name: "Quality Gate"
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, performance-tests, type-checking]
    if: always()
    
    steps:
    - name: Check Test Results
      run: |
        echo "Unit Tests: ${{ needs.unit-tests.result }}"
        echo "Integration Tests: ${{ needs.integration-tests.result }}"
        echo "Performance Tests: ${{ needs.performance-tests.result }}"
        echo "Type Checking: ${{ needs.type-checking.result }}"
        
        if [[ "${{ needs.unit-tests.result }}" != "success" ]]; then
          echo "❌ Unit tests failed"
          exit 1
        fi
        
        if [[ "${{ needs.integration-tests.result }}" != "success" ]]; then
          echo "❌ Integration tests failed"
          exit 1
        fi
        
        if [[ "${{ needs.type-checking.result }}" != "success" ]]; then
          echo "❌ Type checking failed"
          exit 1
        fi
        
        echo "✅ All critical tests passed"
        
    - name: Quality Gate Status
      run: |
        echo "🎉 品質ゲート通過 - デプロイ可能状態" 