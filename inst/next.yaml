id: input
title: "入力フェーズの品質改善"
description: "深度フィルタのバグを修正し、点群データの精度を向上させることで、後続のメッシュ生成および衝突検出の信頼性を高める。"
problems:
  - id: P-INPUT-001
    title: "バイラテラルフィルタにおける深度情報の精度劣化"
    module: "src/input/depth_filter.py"
    description: |
      `_apply_bilateral_filter`メソッド内で、16bitの深度データを8bitに変換してからフィルタを適用している。
      この過程で`cv2.convertScaleAbs`が使用されており、深度情報が65536段階から256段階へと大幅に圧縮され、地形の微細な情報が失われている。
      これがメッシュ品質の低下を招き、衝突が検出されない根本的な原因となっている。
    severity: "Critical"
    fix_suggestion: |
      深度データを8bitに変換するのではなく、float型に正規化してから`cv2.bilateralFilter`を適用し、結果を16bitに戻すように修正する。
      これにより、情報の損失を最小限に抑えつつノイズ除去が可能になる。

tasks:
  - id: T-INPUT-001
    description: "`_apply_bilateral_filter`メソッドの実装を修正する"
    depends_on: [P-INPUT-001]
    steps:
      - "1. `depth_image` (uint16) を `float32` 型の配列に変換する。"
      - "2. `cv2.bilateralFilter` をfloat型の配列に適用する。`sigmaColor` パラメータをfloatスケールに合わせて調整する。"
      - "3. フィルタ適用後のfloat配列をスケールし直し、`uint16` 型に戻す。"
    acceptance_criteria:
      - "深度データの精度を損なうことなく、エッジを保持した平滑化が適用されること。"
      - "修正後、`demo_collision_detection.py`で地形メッシュがより詳細に表示されること。"

id: detection
title: "手検出フェーズのバグ修正と安定化"
description: "手の3D投影における座標計算のバグを修正し、トラッキングの安定性を向上させることで、衝突検出の前提条件を確立する。"
problems:
  - id: P-DETECTION-001
    title: "3D投影におけるY座標の反転バグ"
    module: "src/detection/hands3d.py"
    description: |
      `_project_landmark_to_3d`メソッド内で、2Dピクセル座標から3D空間座標へ変換する際、Y座標の計算式が誤っている。
      `y = (v - cy) * depth_z / fy` となっているため、Y軸が反転してしまい、手が常に地形モデルの下側に表示される。
      これにより、手と地形の衝突が物理的に不可能になっている。
    severity: "Critical"
    fix_suggestion: |
      計算式を `y = -(v - self.camera_intrinsics.cy) * depth_z / self.camera_intrinsics.fy` へ修正し、Open3Dの標準座標系に合わせる。

  - id: P-DETECTION-002
    title: "深度画像の前処理におけるフィルタリングの不備"
    module: "src/detection/hands3d.py"
    description: |
      `_preprocess_depth`メソッド内のガウシアンフィルタが、`NaN`を考慮しているものの、有効なピクセルのみを抽出して1次元配列として処理しているため、空間的な平滑化が正しく機能していない。
      `scipy.ndimage.gaussian_filter`は多次元配列を直接扱えるため、現在の実装は非効率かつ効果が薄い。
    severity: "Medium"
    fix_suggestion: |
      `NaN`値を周辺の有効な深度値で補間（inpaint）したのち、画像全体にガウシアンフィルタを適用する方式に変更する。
      `OpenCV`の`inpaint`関数を利用することで、よりロバストな平滑化が期待できる。

tasks:
  - id: T-DETECTION-001
    description: "`_project_landmark_to_3d`メソッドのY座標計算式を修正する"
    depends_on: [P-DETECTION-001]
    acceptance_criteria:
      - "3Dビューワで、手が正しいY座標（上向き）に表示されること。"

  - id: T-DETECTION-002
    description: "`_preprocess_depth`メソッドのフィルタリング処理を改善する"
    depends_on: [P-DETECTION-002]
    acceptance_criteria:
      - "深度画像がより滑らかになり、ランドマークの3D投影が安定すること。"

id: tracker
title: "手トラッキングの安定性向上"
description: "カルマンフィルタのノイズパラメータを調整し、トラッキングのロバスト性を向上させる。"
problems:
  - id: P-TRACKER-001
    title: "トラッキングが不安定になる不適切なノイズパラメータ"
    module: "src/detection/tracker.py"
    description: |
      `KalmanFilterConfig`で設定されているプロセスノイズと観測ノイズの値が小さすぎる。
      `process_noise_position` (1cm) と `observation_noise` (2cm) は、実際のセンサーノイズや検出のばらつきに対して楽観的すぎるため、フィルタが観測値を棄却しやすくなっている。
      これにより、トラッキングが不安定になったり、すぐにロストしたりする原因となり、衝突判定の対象となる手が減少する。
    severity: "Medium"
    fix_suggestion: |
      `process_noise_position` を `0.05`、`observation_noise` を `0.05` に変更する。
      これにより、フィルタの許容度が高まり、より多くの検出結果を追跡に反映できるようになり、トラッキングが安定する。

tasks:
  - id: T-TRACKER-001
    description: "`KalmanFilterConfig`のノイズパラメータを調整する"
    depends_on: [P-TRACKER-001]
    acceptance_criteria:
      - "手のトラッキングが途切れにくくなり、より安定して追跡されること。"

id: mesh
title: "メッシュ生成のパフォーマンス最適化"
description: "メッシュ生成パイプラインにおけるボトルネックを解消し、リアルタイム性を向上させる。"
problems:
  - id: P-MESH-001
    title: "ハイトマップ生成における非効率なループ処理"
    module: "src/mesh/projection.py"
    description: |
      `_create_heightmap`メソッド内で、各グリッドセルの高さ（統計値）を計算する際に、Pythonのループと複雑なインデックス操作が使われている。
      この実装は、点群の規模が大きくなると深刻なパフォーマンスボトルネックとなり、リアルタイム処理の予算を圧迫する。
    severity: "High"
    fix_suggestion: |
      `scipy.stats.binned_statistic_2d`関数を利用して、ハイトマップ生成処理を全面的に書き換える。
      この関数は、2D点群を指定されたビン（グリッド）に分割し、各ビン内の値の統計量を極めて高速に計算できるため、現在のループ処理を効率的かつ簡潔に置き換えることができる。

  - id: P-MESH-002
    title: "有効点抽出における非効率なループ処理"
    module: "src/mesh/delaunay.py"
    description: |
      `_extract_valid_points`メソッド内で、ハイトマップから有効な3D点を抽出する際に、Pythonのforループを用いてピクセルを一つずつ世界座標へ変換している。
      これもハイトマップの解像度が高くなるとパフォーマンスのボトルネックとなる。
    severity: "Medium"
    fix_suggestion: |
      NumPyのベクトル演算とブロードキャストを活用して、ループ処理を完全に排除する。
      グリッド座標の配列から、一度の行列演算で全ての世界座標を計算することで、処理を大幅に高速化できる。

tasks:
  - id: T-MESH-001
    description: "`projection.py`の`_create_heightmap`を`binned_statistic_2d`で書き換える"
    depends_on: [P-MESH-001]
    acceptance_criteria:
      - "ハイトマップ生成の処理時間が大幅に短縮されること。"

  - id: T-MESH-002
    description: "`delaunay.py`の`_extract_valid_points`をベクトル化する"
    depends_on: [P-MESH-002]
    acceptance_criteria:
      - "有効点抽出の処理時間が大幅に短縮されること。"

id: collision
title: "衝突判定の精度向上"
description: "衝突判定の前提となる空間検索の距離計算を修正し、判定の信頼性を向上させる。"
problems:
  - id: P-COLLISION-001
    title: "空間検索における不正確な距離計算"
    module: "src/collision/search.py"
    description: |
      `_calculate_distances`メソッドが、検索点と「三角形の重心」との距離を計算している。
      これは、真の最短距離（点と三角形上の最近接点との距離）とは異なり、特に細長い三角形などで大きな誤差を生む。
      この不正確な距離に依存して最近傍の三角形が選択されるため、衝突判定の精度が低下し、衝突が見逃される原因となっている。
    severity: "High"
    fix_suggestion: |
      `sphere_tri.py`に、点と三角形の最短距離を正確に計算するヘルパー関数を新設する。
      `search.py`の`_calculate_distances`メソッドは、この新しいヘルパー関数を呼び出すように修正し、正確な距離に基づいて候補三角形を絞り込めるようにする。

tasks:
  - id: T-COLLISION-001
    description: "`sphere_tri.py`に`point_triangle_distance`ヘルパー関数を実装する"
    depends_on: [P-COLLISION-001]
    acceptance_criteria:
      - "点と三角形の間の正確な最短距離が計算されること。"

  - id: T-COLLISION-002
    description: "`search.py`が新しい距離計算関数を利用するように修正する"
    depends_on: [T-COLLISION-001]
    acceptance_criteria:
      - "空間検索の結果が、正確な距離に基づいてソート・フィルタリングされるようになること。"
      - "最終的に、`demo_collision_detection.py`で手が地形に衝突した際に音が発生すること。"
