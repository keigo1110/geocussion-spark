- id: P-MESH-009
  title: "メッシュ更新パイプラインの設計不整合 (根本見直し)"
  module: ["src/mesh/pipeline.py", "demo_collision_detection.py", "src/mesh/lod_mesh.py", "src/mesh/incremental.py"]
  description: |
    これまで部分的にパッチを当ててきたが、依然として以下の構造的欠陥が原因で
    メッシュがリアルタイムに点群へ追従しない。
      A. Viewer/Pipeline/Generator 間の責務分離が曖昧
         • generate_mesh() が副作用でキャッシュを書き換えつつ Viewer 側でも状態を持つ。
      B. 更新トリガ箇所が複数に散在し条件が複雑化
         • frame_diff, hand_presence, force_flag, diff_distance 等を多重評価。
      C. 点群取得 → HeightMap → Triangulation のパスが同期ブロッキングで 40-60 ms 停止
         • 点群取得をスレッド内で待機している間に Update 窓を逃す。
      D. Open3D Visualizer がメインスレッドで動き，remove/add が多発するとレイテンシが発生。
  severity: "Critical"
  fix_suggestion: |
    ✔ アーキテクチャ再設計案
    1) Reactive MeshPipeline
       • MeshPipeline を Stateless にし、入力(PointCloud, HandInfo)→出力(TriangleMesh) の純関数へ。
       • 内部で LOD/Incremental 戦略を選択するがキャッシュは外側 (PipelineManager) が保持。
    2) PipelineManager (新規クラス)
       • PointCloudProducer スレッドから push される最新点群を保持 (lock-free queue)。
       • フレームループ毎に "dirty" フラグ判定 (タイムスタンプ差 & voxelHash) を 0.1 ms で評価。
       • dirty==True なら MeshPipeline に同期呼び出ししてメッシュを生成。
    3) PointCloudProducer (背景スレッド)
       • Depth→PointCloud 変換を別スレッドで常駐実行、最新 numpy array を ring-buffer に publish。
    4) ViewerRefresher
       • メッシュが更新されたら `version_id` をインクリメント。Viewer は version が変わるたびに
         remove/add せず `update_geometry()` のみに切替。
    5) Metrics-Driven Threshold
       • diffDistance, voxelHash, pointCount など複数指標を EWMA でスコア化し 0-1 スケールへ正規化。
        0.6 以上で dirty 判定とし誤検知と取りこぼしをバランスさせる。

- id: T-MESH-200
  description: "非同期 PointCloudProducer & PipelineManager 実装"
  depends_on: [P-MESH-009]
  steps:
    - "1. src/mesh/producer.py に PointCloudProducer (threading.Thread) を実装。"
    - "2. src/mesh/manager.py に PipelineManager を実装 (ring-buffer で最新点群を保持)。"
    - "3. MeshPipeline を pure 関数 `generate_mesh(points, hands)` にリファクタし副作用除去。"
    - "4. FullPipelineViewer から PointCloudProducer/PipelineManager を制御。"
  acceptance_criteria:
    - "連続 60 秒テストで点群→メッシュ遅延平均 ≤120 ms (p95 ≤180 ms)。"

- id: T-MESH-201
  description: "Viewer update_geometry ベース高速リフレッシュ"
  depends_on: [P-MESH-200]
  steps:
    - "1. _update_mesh_visualization() を remove/add でなく update_geometry に変更。"
    - "2. version_id が変わったときのみ `vis.update_geometry()` を呼び、poll_events → update_renderer。"
  acceptance_criteria:
    - "Open3D UI 操作時にも FPS ≥20 を維持。"

- id: T-MESH-202
  description: "Dirty-score EWMA 判定実装"
  depends_on: [P-MESH-200]
  steps:
    - "1. diffDistance, voxelHashDist, pointCountRatio を 0-1 に正規化。"
    - "2. `score = 0.4*dist + 0.4*voxel + 0.2*count` を EWMA(alpha=0.3)。"
    - "3. score>0.6 で dirty。"
  acceptance_criteria:
    - "移動/撤去/追加の各シナリオで false skip ≤2%, false trigger ≤10%。"

  status: "TODO"

- id: T-MESH-203
  description: "型エラーとガード整理 (mypy/pylint 0 エラー)"
  depends_on: [P-MESH-009]
  steps:
    - "1. camera None ガードを self.camera and ... 形式に統一。"
    - "2. depth_image None ケースでゼロ配列を返し cv2.normalize 安全化。"
    - "3. _last_contact_trigger_time のキーを 4-tuple に統一。"
    - "4. Optional[List] 型シグネチャへ合わせ各呼び出しを修正。"
    - "5. ROI tracking 統計呼び出しを self.hands_2d ガードで保護。"
    - "6. DualViewer 親呼び出しの戻り値を無視 (None 型)。"
  acceptance_criteria:
    - "mypy strict と pylint が demo_collision_detection.py でエラー 0。"
  status: "TODO"

- id: T-MESH-204
  description: "PointCloudProducer 起動と PipelineManager 統合"
  depends_on: [T-MESH-200]
  steps:
    - "1. FullPipelineViewer.__init__ で PointCloudProducer を生成し start()。"
    - "2. cleanup()/__del__ で stop_and_join()。"
    - "3. フレームループで producer.get_latest() → PipelineManager.update_if_needed()。"
  acceptance_criteria:
    - "Depth→PointCloud スレッドが独立し GUI FPS 低下 <5%。"
  status: "TODO"

- id: T-MESH-205
  description: "Viewer 可視化 update_geometry 最適化"
  depends_on: [T-MESH-201]
  steps:
    - "1. _update_mesh_visualization() を remove/add せず vis.update_geometry() へ変更。"
    - "2. mesh_version 変化時のみ update_geometry → poll_events → update_renderer。"
  acceptance_criteria:
    - "Viewer で常時 25 FPS 以上を維持 (RTX3060 環境)。"
  status: "TODO"
