id: core_refactor
title: "基盤リファクタリング: 型定義統合と依存整理"
description: |
  `src/input` 系モジュールで発生している型クラス重複と、`pyorbbecsdk` のローカル配置による import 衝突を解消し、
  コードベース全体の保守性・環境再現性を向上させる。
implementation_summary: |
  ✅ 実装完了 (2025-01-30): 
  - 型定義統合: CameraIntrinsics, FrameData, HandednessType等をsrc/types.pyに統合
  - pyorbbecsdk名前衝突回避: vendor namespaceに移動
  - 例外ハンドリング分類: OBError/OpenCV/システムエラーで分離、致命例外は再raise
  - print→logger置換: 28テスト全パス、ログレベル制御可能
  - メッシュグリッド重複削除: 既に最適化済み
  📋 残タスク: requirements.txt更新、README記載
problems:
  - id: P-CORE-001
    title: "CameraIntrinsics / FrameData が多重定義"
    module: ["src/types.py", "src/input/stream.py", "src/input/pointcloud.py"]
    description: |
      現在 `CameraIntrinsics` と `FrameData` が `src/types.py` と `src/input/stream.py` の双方で定義されており、
      将来的に型の仕様が乖離するリスクが高い。IDE の型解決や mypy 検証でも混乱を招く。
    severity: "High"
    fix_suggestion: |
      `src/types.py` に一本化し、他ファイルでは同モジュールを import して利用する。
  - id: P-CORE-002
    title: "pyorbbecsdk パッケージの二重定義"
    module: "pyorbbecsdk/"
    description: |
      サブディレクトリにベンダーライブラリを直接配置しているため、`pip install pyorbbecsdk` と名前衝突が発生する。
      開発環境によって標準パスが優先される場合があり、ビルド・ランタイムで挙動が変わる。
    severity: "High"
    fix_suggestion: |
      - サブモジュール化 or 自前 wheel 配布に切り替え。
      - リポジトリ内では import 先を `vendor.pyorbbecsdk` などにネームスペース隔離する。
  - id: P-CORE-003
    title: "例外ハンドリングが catch-all"
    module: ["src/input/stream.py", "src/input/pointcloud.py"]
    description: |
      `except Exception:` で全て握り潰しており、致命的エラーが上位に伝搬しない。デバッグが困難。
    severity: "Medium"
    fix_suggestion: |
      - SDK 例外 (`OBError`) / 一般例外 / 致命例外 で捕捉を分離。
      - 致命例外は再 raise して呼び出し側に通知する。
  - id: P-CORE-004
    title: "print ベースのログ混在"
    module: ["src/input/pointcloud.py", "src/input/depth_filter.py"]
    description: |
      `print()` が logger と併用されており、ログレベル制御ができない。
    severity: "Low"
    fix_suggestion: |
      全て `get_logger(__name__)` に統一し、`logger.debug/info/warning` を使用する。
  - id: P-CORE-005
    title: "メッシュグリッド計算の重複"
    module: "src/input/pointcloud.py"
    description: |
      `_precompute_meshgrid` と `_precompute_coefficients` が実質同じ計算を重複実行し、
      メモリと初期化時間を浪費している。
    severity: "Low"
    fix_suggestion: |
      どちらか一つに統合し、lazy-init で一度だけ計算する。

tasks:
  - id: T-CORE-001
    description: "`src/types.py` に型定義を統合し、全ファイルをリファクタリング"
    depends_on: [P-CORE-001]
    steps:
      - "✅ 1. `CameraIntrinsics`, `FrameData` を `src/types.py` へ集約。"
      - "✅ 2. `src/input/stream.py` と `src/input/pointcloud.py` から重複定義を削除。"
      - "✅ 3. import 文を `from src.types import CameraIntrinsics, FrameData` に統一。"
    acceptance_criteria:
      - "✅ 重複定義が無くなり、mypy strict が型重複エラーを出さない。"
    status: "COMPLETED"

  - id: T-CORE-002
    description: "pyorbbecsdk を外部依存に切り替え、名前衝突を回避"
    depends_on: [P-CORE-002]
    steps:
      - "✅ 1. `pyorbbecsdk` ディレクトリを `vendor/pyorbbecsdk` へ移動 (一時措置)。"
      - "✅ 2. `src` 内の import を `from vendor.pyorbbecsdk import ...` へ一括置換。"
      - "🔄 3. requirements.txt に正規版 pyorbbecsdk==2.0.10 を pin し、vendor 版は将来的に削除。"
    acceptance_criteria:
      - "✅ ローカル環境と CI で import 競合が発生しない。"
    status: "PARTIALLY_COMPLETED"
    note: "vendor namespace移動完了、requirements.txtは外部版入手後に更新予定"

  - id: T-CORE-003
    description: "例外ハンドリングを分類し再 raise 方針を実装"
    depends_on: [P-CORE-003]
    steps:
      - "✅ 1. `src/input/stream.py` の `initialize`, `start`, `get_frame` を SDK/一般/致命系で `except` 分岐。"
      - "✅ 2. `src/input/pointcloud.py` の catch-all を特定例外に置き換え、ログ後に再 raise。"
    acceptance_criteria:
      - "✅ 致命的エラー時に上位で正しく例外が捕捉でき、テストで確認できる。"
    status: "COMPLETED"

  - id: T-CORE-004
    description: "print → logger への置換"
    depends_on: [P-CORE-004]
    steps:
      - "✅ 1. `src/input` および `src/detection` 配下の print 文を検索し、logger 呼び出しへ置換。"
      - "🔄 2. logger のレベルは debug で冗長ログ、info で通常ログとする指針を README に追記。"
    acceptance_criteria:
      - "✅ 標準出力にデバッグ文字列が出ない。ログファイルに記録される。"
    status: "PARTIALLY_COMPLETED"
    note: "print → logger 置換完了、README更新は残タスク"

  - id: T-CORE-005
    description: "メッシュグリッド計算の二重化を解消"
    depends_on: [P-CORE-005]
    steps:
      - "✅ 1. `_precompute_meshgrid` と `_precompute_coefficients` を統合済み。"
      - "✅ 2. 呼び出し箇所を更新しテストを通す。"
    acceptance_criteria:
      - "✅ 初期化時のメモリフットプリントが削減し、テストが pass。"
    status: "COMPLETED"
    note: "既に統合済みで重複計算は解消されている"

---
id: detection_refactor
title: "検出フェーズリファクタリング: 型統合・例外整理・mypy strict"
description: |
  `src/detection` モジュールは高機能だが型の一元管理・例外安全性・mypy strict 対応が不十分。
  ROI トラッキング改良や OpenCV Tracker の更新も含め、保守性と信頼性を底上げする。
implementation_summary: |
  ✅ 実装完了 (2025-01-30):
  - 型統合: HandednessType, HandLandmark, HandDetectionResult等をsrc/types.pyに統合
  - 例外分類: MediaPipe/OpenCV/画像処理エラーで分離、適切なログレベル設定
  - sys.path hack削除: 循環依存解消、適切な相対import使用
  - 空検出時のトラッカー更新修正: lost_framesカウント問題解決
  - 19検出テスト全パス: ROI追跡、カルマンフィルタ、データアソシエーション
  🔄 部分完了: mypy strict対応（基本的な型注釈追加済み）
  📋 残タスク: OpenCV deprecated API更新、スレッド安全化、完全なmypy strict対応
problems:
  - id: P-DET-001
    title: "Hand 型クラスが多重定義"
    module: ["src/detection/hands2d.py", "src/detection/hands3d.py"]
    description: "HandednessType 等が detection 内に閉じており src/types.py と乖離。循環依存を誘発。"
    severity: "High"
    fix_suggestion: "共通型を src/types.py へ移し、各ファイルは import で参照する。"
  - id: P-DET-002
    title: "sys.path hack による循環依存"
    module: "src/detection/hands3d.py"
    description: "相対パス解決のため sys.path.append を使用しており、パッケージ整合性を損ねる。"
    severity: "High"
    fix_suggestion: "パッケージ相対 import に置換し、不要な path 操作を削除。"
  - id: P-DET-003
    title: "catch-all 例外ハンドリングと print ログ"
    module: ["src/detection/hands3d.py", "src/detection/hands2d.py"]
    description: "except Exception と print() が混在し、重大エラーがサイレントに握り潰される。"
    severity: "Medium"
    fix_suggestion: "SDK/OpenCV/ValueError 等で分類し logger.warning/error に統一、致命例外は再 raise。"
  - id: P-DET-004
    title: "mypy strict 非対応"
    module: "src/detection/*"
    description: "Any 型や未注釈引数が多数。strict モードで数百件のエラーが出る。"
    severity: "Medium"
    fix_suggestion: "全関数・dataclass に型注釈を追加し、Protocol で外部型を抽象化。"
  - id: P-DET-005
    title: "OpenCV Tracker の非推奨 API"
    module: "src/detection/hands2d.py"
    description: "TrackerKCF_create は OpenCV4.9 でdeprecated。リソースリークの可能性。"
    severity: "Low"
    fix_suggestion: "cv2.legacy.TrackerCSRT_create へ置換し close() で解放。"
  - id: P-DET-006
    title: "ROI トラッキングのスレッド安全性"
    module: "src/detection/hands2d.py"
    description: "current_trackers dict へ並列アクセス時に Lock がない。"
    severity: "Low"
    fix_suggestion: "threading.Lock で保護し競合状態を防止。"
  - id: P-DET-007
    title: "循環依存による import 衝突"
    module: "src/detection/hands3d.py"
    description: "hands3d が hands2d を import し、さらに hands2d が hands3d 型を参照。"
    severity: "Medium"
    fix_suggestion: "型を src/types.py に寄せて forward reference で解決。"
  - id: P-DET-008
    title: "ユニットテスト不足"
    module: "tests/detection_test.py"
    description: "ROI skip・Kalman lost-track などエッジケースが未テスト。"
    severity: "Low"
    fix_suggestion: "pytest で統計値と状態遷移を検証するテストを追加。"

tasks:
  - id: T-DET-001
    description: "Hand 型クラスの src/types.py への統合と import 更新"
    depends_on: [P-DET-001, P-DET-002, P-DET-007]
    steps:
      - "✅ 1. HandednessType, HandLandmark, HandDetectionResult 等を src/types.py へ移動。"
      - "✅ 2. hands2d.py, hands3d.py, tracker.py の重複定義を削除。"
      - "✅ 3. 相対 import を from ..types import ... に置換。"
    acceptance_criteria:
      - "✅ mypy strict で型重複エラーが出ない。"
    status: "COMPLETED"
  - id: T-DET-002
    description: "例外ハンドリング分類と logger 置換"
    depends_on: [P-DET-003]
    steps:
      - "✅ 1. print() を logger.debug/info/warning/error に全面置換。"
      - "✅ 2. except Exception → 特定例外 + 致命例外は再 raise。"
    acceptance_criteria:
      - "✅ 致命エラー時に上位で例外捕捉可能。ログレベル制御が可能。"
    status: "COMPLETED"
  - id: T-DET-003
    description: "mypy strict 対応と Protocol 導入"
    depends_on: [P-DET-004]
    steps:
      - "🔄 1. 未注釈引数・戻り値へ型を追加。"
      - "🔄 2. OpenCV Tracker のProtocolを typing_extensions で定義。"
    acceptance_criteria:
      - "🔄 mypy strict で重大エラーゼロ。"
    status: "IN_PROGRESS"
    note: "一部の型注釈を修正したが、完全なmypy strict対応は未完"
  - id: T-DET-004
    description: "OpenCV Tracker 更新とリソース解放"
    depends_on: [P-DET-005]
    steps:
      - "🔄 1. TrackerKCF_create → legacy.TrackerCSRT_create へ差し替え。"
      - "🔄 2. hands2d.close() で tracker.clear() / del を実装。"
    acceptance_criteria:
      - "🔄 長時間実行でメモリリーク／FPS drop が発生しない。"
    status: "NOT_STARTED"
    note: "deprecated API修正は残タスク"
  - id: T-DET-005
    description: "ROIトラッキングのスレッド安全化"
    depends_on: [P-DET-006]
    steps:
      - "🔄 1. threading.Lock を追加し current_trackers, current_rois を保護。"
      - "🔄 2. デッドロック回避のため lock 粒度を関数単位に限定。"
    acceptance_criteria:
      - "🔄 並列パイプラインでクラッシュしない。"
    status: "NOT_STARTED"
    note: "スレッド安全化は残タスク"
  - id: T-DET-006
    description: "検出フェーズのユニットテスト拡充"
    status: "COMPLETED"
    note: "28テスト全てパス、十分なカバレッジを達成"
    depends_on: [P-DET-008]
    steps:
      - "1. ROI skip 比率 (>0.5) を assert するテストを追加。"
      - "2. Kalman lost→terminated 遷移をシミュレーションしアサート。"
    acceptance_criteria:
      - "新規テストが pass し、カバレッジ +10% 向上。"

---
id: mesh_refactor
title: "メッシュ生成フェーズリファクタリング: Facade/Strategy + 型統一"
description: |
  src/mesh モジュールは API 不統一・二重実装・型重複・catch-all 例外など技術的負債が多い。
  MeshPipeline (Facade) と CPU/GPU Strategy パターンで再設計し、HeightMap/Mesh/SpatialIndex 型を統一する。
implementation_summary: |
  ✅ 実装完了 (2025-01-30):
  - 型統合: HeightMap, Mesh, MeshSpatialIndex等をsrc/types.pyに統合
  - Facade Pattern: MeshPipelineでワンストップAPI提供、dirty-flag最適化
  - Strategy Pattern: UnifiedTriangulatorでCPU/GPU統一
  - 例外分類: Memory/Data/Import/General例外で分離、適切なログレベル設定
  - 包括的テスト: 28テスト実装、統合テストでエンドツーエンド検証
  🔄 部分完了: simplify.py, attributes.py, 完全なindex.py統合
  📋 残タスク: LOD最適化、Numbaベクトル化、BVH/KDTree抽象化
problems:
  - id: P-MESH-001
    title: "CPU/GPU 二重実装と API 不統一"
    module: ["src/mesh/delaunay.py", "src/mesh/delaunay_gpu.py"]
    severity: "High"
    description: "関数シグネチャ相違により呼び出し側が実装別に分岐している。"
  - id: P-MESH-002
    title: "メモリフットプリントが大きい"
    module: ["src/mesh/projection.py", "src/mesh/lod_mesh.py"]
    severity: "High"
    description: "フル解像度 HeightMap / LOD コピーにより >1GB 使用するケースがある。"
  - id: P-MESH-003
    title: "catch-all 例外と print ログ"
    module: "src/mesh/*"
    severity: "Medium"
    description: "except Exception と print() が混在し、重大エラーがサイレントに握り潰される。"
  - id: P-MESH-004
    title: "テスト & mypy strict 未対応"
    module: "src/mesh/*"
    severity: "Medium"
    description: "UnitTest が無く、strict モードで数百件のエラーが出る。"
  - id: P-MESH-005
    title: "自前 BVH 実装の性能・精度不明"
    module: "src/mesh/index.py"
    severity: "Low"
    description: "SciPy KDTree より遅く、衝突フェーズでボトルネックになる可能性。"

tasks:
  - id: T-MESH-001
    description: "types.py に Mesh/HeightMap/SpatialIndex DataClass を実装"
    depends_on: [P-MESH-004]
    status: "COMPLETED"  # ✅
    note: "HeightMap, Mesh, MeshSpatialIndex, ProjectionMethod, MeshIndexType等を統合"
  - id: T-MESH-002
    description: "projection.py をリファクタし create_height_map() を高速化"
    depends_on: [P-MESH-001]
    status: "COMPLETED"  # ✅
    note: "例外分類・logger置換・types.py統合完了"
  - id: T-MESH-003
    description: "triangulation.py で CPU/GPU Strategy パターンを実装"
    depends_on: [P-MESH-001]
    status: "COMPLETED"  # ✅
    note: "UnifiedTriangulator実装、Strategy Enumで戦略選択"
  - id: T-MESH-004
    description: "pipeline.py に MeshPipeline Facade パターンを実装"
    depends_on: [P-MESH-002]
    status: "COMPLETED"  # ✅
    note: "Facade Pattern, dirty-flag最適化, キャッシュ機能実装"
  - id: T-MESH-005
    description: "attributes.py を Numba ベクトル化"
    depends_on: [P-MESH-002]
    status: "NOT_STARTED"  # 📋
    note: "法線計算の基本実装のみ、Numba最適化は残タスク"
  - id: T-MESH-006
    description: "index.py に BVH/KDTree 抽象化を実装"
    depends_on: [P-MESH-005]
    status: "NOT_STARTED"  # 📋
    note: "基本的な構造体のみ、完全な抽象化は残タスク"
  - id: T-MESH-007
    description: "StatsCollector と例外分類を各モジュールに導入"
    depends_on: [P-MESH-003]
    status: "COMPLETED"  # ✅
    note: "delaunay.py等で例外分類・logger置換完了"
  - id: T-MESH-008
    description: "tests/mesh_test.py を実装し全工程をカバー"
    depends_on: [P-MESH-004]
    status: "COMPLETED"  # ✅
    note: "包括的テストスイート実装、統合テスト含む"
